name: Build and Release Electron App

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '16'

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'
        cache: 'pip'
      
    - name: Install Python setup tools
      run: |
        pip install setuptools

    - name: Install dependencies
      run: npm install

    - name: Package and Build the Electron app
      run: |
        npm run package
        npm run make

    - name: Archive the build (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        cd out/make
        zip -r ../../quickutils-linux.zip *
        cd ../..

    - name: Archive the build (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        cd out/make
        powershell Compress-Archive -Path * -DestinationPath ../../quickutils-windows.zip
        cd ../..

    - name: Archive the build (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        cd out/make
        zip -r ../../quickutils-macos.zip *
        cd ../..

    - name: Upload the build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-${{ matrix.os }}
        path: quickutils-*.zip

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Download all artifacts
      uses: actions/download-artifact@v3
      with:
        path: ./artifacts

    - name: Display structure of downloaded files
      run: ls -R
      working-directory: ./artifacts

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        body_path: .github/release-notes.txt
        draft: false
        prerelease: false

    - name: Upload Release Asset (Ubuntu)
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./artifacts/build-ubuntu-latest/quickutils-linux.zip
        asset_name: quickutils-linux.zip
        asset_content_type: application/zip

    - name: Upload Release Asset (Windows)
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./artifacts/build-windows-latest/quickutils-windows.zip
        asset_name: quickutils-windows.zip
        asset_content_type: application/zip

    - name: Upload Release Asset (macOS)
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./artifacts/build-macos-latest/quickutils-macos.zip
        asset_name: quickutils-macos.zip
        asset_content_type: application/zip