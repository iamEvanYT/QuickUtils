name: Build and Release Electron App

on:
  release:
    types: [published]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest] #, windows-latest, macos-latest]
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '16'

    - name: Install dependencies
      run: npm install

    - name: Package and Build the Electron app
      run: |
        npm run package
        npm run make

    - name: Archive the build (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        mkdir artifacts
        cp -R out/make/* artifacts/

    - name: Archive the build (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        mkdir artifacts
        powershell Compress-Archive -Path out\make\* -DestinationPath artifacts\app-windows.zip

    - name: Archive the build (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        mkdir artifacts
        cp -R out/make/*.dmg artifacts/

    - name: Upload the build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-${{ matrix.os }}
        path: artifacts

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v3
      with:
        path: ./artifacts

    - name: Display structure of downloaded files
      run: ls -R
      working-directory: ./artifacts

    - name: Get release
      id: get_release
      uses: bruceadams/get-release@v1.3.2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload Release Asset (Ubuntu)
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.get_release.outputs.upload_url }}
        asset_path: ./artifacts/build-ubuntu-latest/your-app-name.deb
        asset_name: your-app-name-linux.deb
        asset_content_type: application/vnd.debian.binary-package

    # - name: Upload Release Asset (Windows)
    #   uses: actions/upload-release-asset@v1
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #   with:
    #     upload_url: ${{ steps.get_release.outputs.upload_url }}
    #     asset_path: ./artifacts/build-windows-latest/app-windows.zip
    #     asset_name: your-app-name-windows.zip
    #     asset_content_type: application/zip

    # - name: Upload Release Asset (macOS)
    #   uses: actions/upload-release-asset@v1
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #   with:
    #     upload_url: ${{ steps.get_release.outputs.upload_url }}
    #     asset_path: ./artifacts/build-macos-latest/your-app-name.dmg
    #     asset_name: your-app-name-macos.dmg
    #     asset_content_type: application/x-apple-diskimage